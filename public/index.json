
[{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/tags/free/","section":"Tags","summary":"","title":"Free","type":"tags"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/","section":"Hitchhiker","summary":"","title":"Hitchhiker","type":"page"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/tags/server/","section":"Tags","summary":"","title":"Server","type":"tags"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/categories/techplay/","section":"Categories","summary":"","title":"TechPlay","type":"categories"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/tags/vps/","section":"Tags","summary":"","title":"Vps","type":"tags"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/tags/%E8%96%85%E7%BE%8A%E6%AF%9B/","section":"Tags","summary":"","title":"薅羊毛","type":"tags"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/tags/%E6%95%99%E7%A8%8B/","section":"Tags","summary":"","title":"教程","type":"tags"},{"content":"写下这些文字的时候，本站正处于⭐寄掉⭐的状态——服务器使用校园网， 而用curl认证的校园网时不时会断开（据室友经验,是不小心连上了无线网导致的）；ssh又发电了，可能是因为我的环境从宿舍变成了教室， 主机的ip地址从10.xx变成172.26.xxx，这就导致我无法连接还在宿舍的服务器来配置网络。1为了让网站不那么鸡肋，同时满足折腾的精神需求， 我决定在这次近代史课上尝试配置一个云主机，并记录过程与遇到的问题。\n开始配置之前 # 关于VPS # VPS（Virtual Private Server，虚拟专用服务器）是使用虚拟化技术，在一台物理服务器上划分出的多个独立“虚拟服务器”。 每个 VPS 都拥有自己的操作系统、存储空间、CPU、内存和网络接口，就像一个小型的云服务器。\nVPS 通常运行在大型云平台（如 微软的 Azure、亚马逊的AWS、阿里云）之上，这些平台拥有大量的公网 IP 资源。云平台为了让用户能远程连接 VPS（如 SSH、RDP），通常会： 为每台 VPS 自动或手动分配一个 公网 IPv4 地址，并且 公网 IP 直接绑定到该 VPS 的网络接口，或通过 NAT 映射，也就变相地获得了一个公网ip地址。\n选择提供商 # 作为新手并不要求VPS服务的质量和硬件配置有多好，所以只会寻找免费服务，参考了这篇博客文章。 总结下来，只有甲骨文(Oracle)可以永久白嫖服务器，但是注册非常麻烦，并且需要一个支持国际货币的 visa 卡，实在懒得办了。 而 Azure 服务会为学生提供每年 100 美金的免费额度，只需要一个 edu 邮箱就可以申请，所以我选择了Azure.\n配置 Azure # 主要参考这篇文章。这篇文章已经非常详细了，配置过程中没有遇到任何问题（除了云主机涨价），至福！\nOMG It\u0026rsquo;s CSDN💩!\n推荐搭配净化 CSDN 脚本使用；希望你点开链接之前，这篇文章不会成为 💩VIP💩 专属。\n下一步……? # 没想到获取一个ip地址这么容易，也没想到服务器连不上的原因这么抽象1。总之，既然两个主机都挺稳定的， 可以考虑让这两个服务器一起负责为这个网站服务，做负载均衡。\nWell actually🤓👆, 以上整个推论都是错误的。在写完这篇后回寝室发现，内外网都断了——但只是因为我中午不小心碰了一下主机导致网线松动， 没有连上。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2025 April 29","externalUrl":null,"permalink":"/posts/configuring-vps/","section":"Posts","summary":"记录了自己决定搞一个免费的云主机玩玩的全过程，以及一些科普和吐槽。","title":"我是学生，送我——使用Microsoft Azure配置云主机","type":"posts"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/tags/%E4%BA%91%E4%B8%BB%E6%9C%BA/","section":"Tags","summary":"","title":"云主机","type":"tags"},{"content":"","date":"2025 April 29","externalUrl":null,"permalink":"/tags/%E6%8A%98%E8%85%BE/","section":"Tags","summary":"","title":"折腾","type":"tags"},{"content":"在这个各种自动化工具都发展的十分健全的年代，建立静态托管的个人网站已经不再是一种非常geek的事情了，这甚至不比重装windows系统困难多少。建站的花费也是微乎其微：如果不执着于网站的域名，也不介意网站时不时无法访问，你甚至不需要花一分钱来达成这个目的；你需要的只是一个能够正常运行、受得了长时间开机的电脑罢了。不过，本站的建立还是比直接把html挂在github page要多出几步的，所谓折腾的乐趣大概就在这里吧（笑）。\n自底向上的Overview # 本次建站中，我选择在本机Arch Linux系统上使用Blowfish主题的Hugo生成网站项目，再将其public文件夹下的网页文件上传至Debian系统的香橙派主机的/var/www/hugo上；香橙派作为服务器，Nginx监听80端口进行静态网页内容的调取，作为反向代理1；Cloudflare建立与服务器的隧道，提供外界访问的接口，作为第二个反向代理；最后，使用Nameslio购买该域名，并将DNS配置为Cloudflare提供的DNS。\n于是，当你的鼠标点击https://hhikr.moe后，上文提到的这些部件就会像一组齿轮一般，反向地连锁运行；而对于目前的这个网站，各种交互只不过是通过这组齿轮，间接地访问服务器中的 html 文件罢了。\n自顶向下的Breakdown # 1. Nameslio: 域名的购买 # 了解的不多，也没什么好说的。正常的.com域名五六十就可以买到，廉价的.xyz/.top域名更是可以夸张到两位数的价格就可以连续租用十年，.moe在 Nameslio 上价格较贵，但价格还是不到一百一年。\n域名也可以在某些网站上免费申请，不过可能面对审核周期长、难以备案等问题。\n2. Cloudflare: 大善人的余裕 # 因为moe而多花几十已经够亏了，再去买个ip地址未免过于破费。而 Cloudflare 正好就可以实现不用自己买公网ip就可以实现外界访问的入站。它主要做了两件事：\n提供 DNS 服务器； 使用 Tunnel 服务，将服务器中的内容通过 Tunnel 向世界敞开。 cloudflare在本机浏览器中的配置几乎都是跟着这个视频来的（跟着做到建立tunnel之前），所以省略具体的配置内容，看视频吧。\n一些科普 # cloudflare是如何做到不需要提供公网ip也能使入站流量导向hhikr.moe?\n当然，不可能做到“不需要ip地址”；cloudflare的tunnel技术提供了所谓的内网出站2的功能。 所谓“内网出站”，就是香橙派像浏览器访问网页一样，自己去连接外部服务器，这种连接在校园网、家庭宽带等没有公网IP的环境下是允许的3，不需要路由器做特殊设置（比如端口映射）。 建立隧道后，Cloudflare服务器就能通过这条香橙派主动打通的通道，把世界各地的访问流量安全地传给香橙派，从而实现即使没有公网IP，网站也可以被所有人访问。\n换句话说，香橙派用 cloudflared 程序， 主动去连接 Cloudflare 的服务器（出站连接）， 这条连接就是一个持久保持的加密通道（Tunnel，隧道）， Cloudflare那边可以通过这条隧道“推送”用户的请求过来。\nCloudflare 为托管的网站免费提供了许多服务，可谓是互联网带善人了，有空会多研究研究。（这算开坑吗？）\n3. Nginx \u0026amp; Orange Pi # 通过ssh服务连接至香橙派主机，在其上进行 Cloudflare 服务、Nginx托管的相关配置。\n连接ssh遇到的问题 # 校园网环境内，服务器的ssh连接遇到了严重的连接问题，并且十分玄学，具体表现是我的主力电脑和手机（使用Termmius软件）都无法连接ssh，舍友的手机秒连， 但是舍友的电脑一样连接不上。但是给香橙派插上主机后连接就没有任何问题了。只能推断是对不同段ip,校园网的管理员配置不一样，因为插网线后内网ip从10开头变成了 172开头（但是主力电脑上的ip一直是10开头）。\n配置流程 # 传输脚本 # 编写脚本，将本地的文件传输至服务器。使用rsync指令，这一部分也是需要ssh的。\n#!/bin/bash # ===================== 配置区 ===================== # DEFAULT_USER=\u0026#34;orangepi\u0026#34; DEFAULT_HOST=\u0026#34;114.514.19.19\u0026#34; REMOTE_DIR=\u0026#34;/var/www/hugo\u0026#34; DEPLOY_LOG=\u0026#34;$HOME/.hugo_deploy.log\u0026#34; URL=\u0026#34;https://hhikr.moe\u0026#34; # ================================================== # echo \u0026#34;🌐 当前配置：\u0026#34; echo \u0026#34;用户：$DEFAULT_USER\u0026#34; echo \u0026#34;IP地址：$DEFAULT_HOST\u0026#34; echo \u0026#34;远程目录：$REMOTE_DIR\u0026#34; echo \u0026#34;\u0026#34; # —— 是否更换 IP 地址？—— read -p \u0026#34;当前的 IP 是 ${DEFAULT_HOST}，是否更换？(y/N): \u0026#34; change_ip if [[ \u0026#34;$change_ip\u0026#34; =~ ^[Yy]$ ]]; then read -p \u0026#34;请输入新的 IP 地址: \u0026#34; new_ip if [[ -n \u0026#34;$new_ip\u0026#34; ]]; then DEFAULT_HOST=\u0026#34;$new_ip\u0026#34; echo \u0026#34;✅ IP 更新为 $DEFAULT_HOST\u0026#34; else echo \u0026#34;⚠️ 未输入新 IP，继续使用默认 IP：$DEFAULT_HOST\u0026#34; fi fi # —— 输入 SSH 密码 —— read -s -p \u0026#34;请输入 SSH 密码（不会显示）: \u0026#34; SSHPASS echo \u0026#34;\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;📁 检查远程目录：$REMOTE_DIR\u0026#34; read -p \u0026#34;是否继续部署到该目录？(Y/n): \u0026#34; confirm_dir if [[ \u0026#34;$confirm_dir\u0026#34; =~ ^[Nn]$ ]]; then read -p \u0026#34;请输入新的远程目录路径: \u0026#34; REMOTE_DIR fi echo \u0026#34;🚧 开始构建 Hugo 项目...\u0026#34; hugo 2\u0026gt; hugo-error.log if [ $? -ne 0 ]; then echo \u0026#34;❌ Hugo 构建失败！错误日志保存在 hugo-error.log\u0026#34; exit 1 fi echo \u0026#34;📤 正在上传静态文件到 ${DEFAULT_USER}@${DEFAULT_HOST}:${REMOTE_DIR} ...\u0026#34; sshpass -p \u0026#34;$SSHPASS\u0026#34; rsync -avz --delete -e \u0026#34;ssh -o StrictHostKeyChecking=no\u0026#34; ./public/ ${DEFAULT_USER}@${DEFAULT_HOST}:${REMOTE_DIR} | tee -a \u0026#34;$DEPLOY_LOG\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;❌ 上传失败！请检查网络或 SSH 权限\u0026#34; exit 1 fi echo \u0026#34;\u0026#34; echo \u0026#34;✅ 部署成功！你的网站应该已经上线：$URL\u0026#34; # —— 是否打开浏览器访问？（仅本机有图形界面时建议开启）—— if command -v xdg-open \u0026amp;\u0026gt; /dev/null; then read -p \u0026#34;是否现在在浏览器中打开网站？(Y/n): \u0026#34; open_browser if [[ ! \u0026#34;$open_browser\u0026#34; =~ ^[Nn]$ ]]; then xdg-open \u0026#34;$URL\u0026#34; fi fi echo \u0026#34;📜 部署日志已记录：$DEPLOY_LOG\u0026#34; 由于我几乎不会写bash脚本，这个脚本是由llm生成的，可能有很奇怪的地方。好在 It just works.\nNginx配置 # 配置Nginx，监听localhost的80端口，托管静态网页。\n# 1. 创建站点目录 sudo mkdir -p /var/www/hugo sudo chown -R $USER:$USER /var/www/hugo # 2. 写入配置 sudo nvim /etc/nginx/sites-available/hugo # 3. 启用配置 sudo ln -s /etc/nginx/sites-available/hugo /etc/nginx/sites-enabled/ # 建立静态连接将“可用网站”放在“已激活网站”下，所以Nginx就会从/etc/nginx/sites-enabled/寻找可以启动的网站。 sudo nginx -t # -t代表test,用于测试Nginx配置是否正确 sudo rm /etc/nginx/sites-enabled/default # 删除默认界面，否则你可能会看到Nginx的默认界面而不是你的网站 sudo systemctl reload nginx # 刷新服务，启动nginx Nginx配置文件实例：\nserver { # 监听端口。为什么是80？因为cloudflare tunnel走的是http！ listen 80; server_name hhikr.moe; root /var/www/hugo; # 首页。 index index.html; # 如果路径存在，返回文件；否则返回 404 location / { try_files $uri $uri/ =404; } } Cloudflare配置 # 安装：根据官方教程安装。下面是官网提供的debian系安装流程。 curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloudflare-main.gpg echo \u0026#34;deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared bookworm main\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/cloudflared.list sudo apt update sudo apt install cloudflared -y 登陆并创建tunnel # 登录 Cloudflare cloudflared tunnel login # 它会打开一个浏览器链接，在上面登录你的 Cloudflare 账户。 # 创建 tunnel cloudflared tunnel create hhikr-moe-tunnel # 会生成一个 .json 文件，路径如 /home/orangepi/.cloudflared/634b00...json 配置 Cloudflare Tunnel，映射到本地 Nginx mkdir -p ~/.cloudflared nano ~/.cloudflared/config.yml 配置文件这么写：\ntunnel: hhikr-moe-tunnel credentials-file: /home/orangepi/.cloudflared/634b00...json ingress: - hostname: hhikr.moe service: http://localhost:80 - service: http_status:404 将tunnel与域名绑定，并启动tunnel cloudflared tunnel route dns hhikr-moe-tunnel hhikr.moe # 暂时启动，有输出，用于查看运行状态或debug cloudflared tunnel run hhikr-moe-tunnel # 永久启动，作为service运行，开机就会自动运行。 sudo cloudflared service install 至此，网站应该就可以正常运作了。おめでとう🎉\n反向代理是一种服务器，它位于客户端和目标服务器之间，客户端以为自己直接连接的是目标服务器，但实际上所有请求都先到反向代理，由它再转发到真正的服务器；这样可以隐藏真实服务器地址、实现负载均衡、缓存内容，加速访问，提高安全性。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n在网络通信里，出站（Outbound）指的是从你的设备主动发起请求到外部，入站（Inbound）指的是外部主动连接到你的设备。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n没有公网ip的设备可以进行出站访问，但不能处理入站请求。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2025 April 28","externalUrl":null,"permalink":"/posts/building-website/","section":"Posts","summary":"第一次建站的一些经验。","title":"记录我的第一次建站","type":"posts"},{"content":"","date":"2025 April 28","externalUrl":null,"permalink":"/tags/%E5%BB%BA%E7%AB%99/","section":"Tags","summary":"","title":"建站","type":"tags"},{"content":"","date":"2025 April 28","externalUrl":null,"permalink":"/tags/%E9%A6%99%E6%A9%99%E6%B4%BE/","section":"Tags","summary":"","title":"香橙派","type":"tags"},{"content":"hey! (招手.gif)1\n早就想做个人网站了，但是一直摆着……不过还是做出来了，感谢朋友半天建站完成的push喵。\n软件工程二年生，正在被编译原理折磨。可能什么文章都会放网站上,专业/语言/音乐的学习笔记、观影杂谈、或者是捣鼓一些自己感兴趣的东西，比如尝试不同的linux发行版和桌面环境、捣鼓网站新功能之类\n这篇文章将会是一个时间胶囊，记录网站在今后的沿革。目前网站还在测试阶段，并没有什么有趣的东西，预计劳动节会做个差不多。所以首先，来看看我建站都用了哪些相关的技术栈吧（超简单的来着）。\n第一次修改，ver 0.20250428\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2025 April 28","externalUrl":null,"permalink":"/posts/time-machine/","section":"Posts","summary":"引导之始。","title":"时间胶囊","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]